									Design Principles: Part 1

1. Measuring Quality of Design
	
	An incremental, iterative process

	Difficult to design right the first time, good design have to evolve and not done in one sitting.

2. Metrics for class design

	- Coupling

		Inheritance vs. coupling
			- inheritance increase coupling
		Strong coupling complicates a system
		design for weakest possible coupling

		if we do have to couple, it's better to couple to an interface rather than coupling to a implementation, this is mainly centered around statically type languages. In dynamically typed languages, we don;t really care so much about interface.

		High coupling is evil, means your code depends on a lot of things and it also depends on very strong dependecy on things, whereas low coupling means you depend on fewer number of things but also the things you depend on are much more lightweight dependecy like an interface rather than a concrete class. 

	- Cohesion

		Degree of connectivity among the elements of a single module or class. In other words, cohesion is talking about how much the different parts of an abstraction are related and work with each other. Cohesion makes a class very narrow and focused. Another term for cohesion is Single Responsibility Principle (SRP). 

		High cohesion is when it really becomes small and focused, does one thing and one thing well. Low cohesion is when it dilutes and bloats up and then just kind of spreads around like a blotting paper. It tries to do a lot of stuff, takes a lot of surface area. 

		Coincidental cohesion: all elements related undesirable
		Functional cohesion: work together to provide well-bounded behavior


	A good design have high cohesion and low coupling. 

	- Suffiency

		Implies minimal interface
		Captures enough characteristics for meaningful and efficent interaction

	- Completeness

		Interface captures all meaningful chracteristics of an abstraction
		Implies covering all aspects of an abstraction

	- Primitiveness (of operations/interface)

		Efficient implementation requires access to underlying representation.

		The methods, the operations we provide on an interface, on a class are really very small and basic implementation and they are really focues towards providing efficient implementation for whatever functionality we want.

		When it comes to functions, always try to provide minimum number of functions and also functions that are primitive.

3. Law of Demeter

	"Methods of a class should not depend in any way on the internal structure of any class, except the immediate structure of their own class. Further, each method should send messages to objects belonging to a very limited set of classes only."

	First part talks about encapsulation and cohesion. Second part talks about low coupling. 

4. Tell Don't Ask principle

	"Procedural code gets information and then makes decisions. OO code tells objects to do things" Alec Sharp in Smalltalk by Example.

	Objects should take limited responsibility and rely on others to provide appropraite service

	Command-Query Sepration: categorize methods as command or query

5. Train Wreck Coding

	You may find code that continues to call on objects return by methods in sequence

	customer.getAddress().getCity().getCounty()...

	This indicates that you are interest in working with objects that are farther away than those that are your close friend

	Hard to understand

	Hard to debug

	Lacks Cohesion

	Good candidate for refactoring



									Quiz Part 1

1. Design for high cohesion and low coupling.
2. A code that's narrow, focused, and does one thing well is considered to be cohesive.
3. A good design has to evolve.
4. Depending on an interface instead of a class can lead to loose coupling.
5. To create a good design we have to constantly evaluate the quality, evolve it and be consicous of our design activities not just get it working.




									Design Principles: Part 2

Stability - no reason to change
	Interface

Rigidity - there is reason to change, but we are extremely reluctant to change (afraid to make changes)


1. Bad Design

	- Rigidity - Hard to change, results in cascade of changes

		You know whether it is stability or rigidity by looking whether that is a class or an interface. If it is an interface it contributes to stability, if it's a class with dependecies it contributes to rigidity. 

	- Fragility - Breaks easily and often

		Low cohesion and high coupling causes fragility

	- Immobility - Hard to reuse (due to coupling)

		The reuse is inversely proportional to the level of coupling. The more the coupling, less the reuses, less the coupling, the more reusable the code can become.

	- Viscosity - Easy to do wrong things, hard to do right things
	- Needless Complexity - Complicated class design, overly generalized
	- Needless Repetition - Copy and Paste away
	- Opacity - Hard to understand

2. Principles

	Guiding Principles that help develope better systems

	Use principles only where they apply

	You must see the symptoms to apply them

	If you apply arbitrarily, the code ends up with Needless Complexity



									Quiz Part 2

1. Creating cryptic variables and terse code leads to opacity, a peril of bad design.
2. In desgin, tight coupling makes reuse hard not easy.
3. Fragility is proportional to coupling and inversely proportional to cohesion.
4. In desgin, in-coming dependencies lead to rigidity.
5. The ability to reuse is inversely proportional to coupling.




									Design Principles: Part 3

1. YAGNI Principles

	"You Aren't Going to Need It (yet)"

	You are looking out for extensibility
	You are not sure if a certain functionality is needed
	Designing what you do not know full leads to unnecessary complexity and heavy weight desgin
	If you really need it, design it at that time

2. DRY Principles

	"Don't Repeat Yourself"

	Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.
	It is not just about duplication of code, it's about duplication of effort as well. 
	One of the most diffituclt, bust most seen

	Some time it is hard to realize we are violating the DRY principle
	It is much easier to copy, paste and modify code to get it working the way you wan it, but that's not the right way to do.
	Duplicating code results in poor maintainability, expensive to fix bugs/errors and hard to keep up with change.

3. SRP Principle

	"Single-Responsibility Principle" another name is cohesion

	A class should have only one reason to change

	SRP affects Reuse
		Lower cohesion results in poor reuse
		Tight coupling 
		Poor Cohesion
		Bad for reuse




									Quiz Part 3

1. Violating the DRY principles often may increase the cost of maintenance.
2. SRP can influence ease of code change, reduced cost of maintenance, readability and understandability.
3. DRY is not mainly about duplication of code but duplication of effort as well.
4. According to the DRY principle, we have to avoid duplicating code and effort.
5. The main concept or metric behind SRP is cohesion.





									Design Principles: Part 4

1. Nature of code

	"Software Systems change during their life time"

	Both better designs and poor designs have to face the changes; good designs are stable

2. Open Closed Principle

	"Software Entities (Classes, Modules, Functions, etc.) should be open for extension, but closed for modification" - Bertrand Meyer

	One way to make sure a software is extensible is really to rely upon an abstraction and not depend on the concrete type but on an abstract type

	Characteristics of a poor design:

		Single change results in cascade of changes
		Program is fragile, rigid and unpredictable

	Characteristics of a good design:

		Modules never change
		Extend Module's behavior by adding new code, not changing existing code


	A class must not depend on a Concrete class; it must depend on an abstract class

	Abstraction and Polymorphism are the key to extensibility






									Quiz Part 4

1. A poor design may be fragile, unpredictable and rigid
2. A good design is resilient, it will bounce back up from change
3. If we type check a reference for one of different types, then the code would be hard to extend, the code may be violoating OCP and the code may have to change more frequently
4. Strong coupling does not helps to make a code more extensible
5. To make code extensible, it rely on interfaces and polymorphism






									Design Principles: Part 5

1. OCP

	Strategic Closure:

		No program can be 100% closed

		There will always be changes against which the module is not closed

		Closure is not complete - it is strategic

		Designer must decide what kinds of changes to close the desgin for.

		This is where the experience and problem domain knowledge of the designer comes in

		To have good extensibility design we need both knowledge in the domain and software development

	Heuristics and Conventions that arise from OCP:

		Make all member variables private

		Encapsulation: All classes/code that depend on my class are closed from change to the variable names or their implementation within my class. Member functions of my class are never closed from these changes

		Further, if this were public, no class will be closed against improper changes made by any other class.

		No global variables

		Run-time type identification (RTTI) is ugly and dangerous 
		C++ - RTTI dynamic_cast
		Java - instanceof
		C# - is

		EXAMPLE: if (other.engine instanceof ...)  // this is bad and dangerous. What is wrong with this is that every time you introduce a new type of object, you would have to come back and change the code. We can prevent this by using polymorphism

		If a module tries to dynamically cast a base class pointer to several derived classes, any time you extend the inheritance hierarchy, you need to change the moduel.

		Not all these situation violate OCP all the time.






									Quiz Part 5

1. Closure is not complete, it's strategic
2. If we design a class for extensibility, the class sometimes have to change for any requirements change.
3. The use of Runtime Type Identification (RTTI) is NOT always a bad idea
4. Dependencies can be on both interface and class
5. Following the Open-Closed Principle can help us create code that is maintainable, more extensible, more decoupled and easier to change






									Design Principles: Part 6

1. Liskov's Substitution Principle

	Inheritance is used to realize and reuse Abstraction, and polymorphism which are key to OCP

	How do we measure the quality of inheritance?

	LSP:

		"Functions that use pointers or references to base classes must be able to use objects of derived classes without knowing it"

2. Design by Contract

	Advertised Behavior of the Derived class is Substittutable for that of the Base class

	Substitutability: Dervied class Services Require no more and promise no less than the specification of the corresponding services in the base class. 

	---JAVA CODE---

	class Randomizer {
		public int nextRand(int from, int to) {
			verifyPreCondition(from, to);

			return from;
		}
		protected void verifyPreCondition(int from, int to) {
			if (from < 0 || to < from) {
				throw new RuntimeException("Error")
			}
		}
	}

	class EfficientRandomizer extends Randomizer {
	//this is efficient if to >= 2 * from. Otherwise, it is only as efficient as the base


	//doing it this way would not violate LSP

		@Override
		public int nextRand(int from, int to) {
			verifyPreCondition(from, to);    //require no more but promise no less than the base
 
			if(to >= 2 * from)
				//do efficient algorithm
				return from + 1;
			else
				return super.nextRand(from, to);       
		}	
	}

	public class Main {
		public static void use(Randomizer randomizer) {
			System.out.printlm(randomizer.nextRand(2, 3))
		}

		public static void main(String[] args) {
			Randomizer randomizer = new Randomizer();
			use(randomizer);

			EfficientRandomizer efficientRandomizer = new EfficientRandomizer();
			user(efficientRandomizer);
		}
	}





									Quiz Part 6

1. LSP says we have to ensure that while a derived class may provide alternate implementations, it should preserve the advertised behavior of the base.
2. The LSP principle applies only to compile time checks and not runtime verifications. - NO
3. The LSP principle directly addresses issues with Inheritance
4. Suppose a base method, which takes an int, will only accept even numbers; the derived overriding method wants to accept any int, even or odd. Is this a violation of LSP? - NO
5. Compilers are not really good at identifying violations of LSP







									Design Principles: Part 7

1. LSP

	"Any Derived class object must be substitutable where ever a Base class object is used, without the need for the user to know the difference"


	---JAVA CODE---

	class Bird {
		public void showBeak() {
			System.out.println("Showing beak");
		}
		public void fly() {
			System.out.println("flying...");
		}
	}

	class Eagle extends Bird {
		@Override
		public void showBeak() {
			System.out.println("Show that excellent beak");
		}

		@Override
		public void fly() {
			System.out.println("flying like an eagle");
		}
	}

	class Parrot extends Bird() {
		@Override
		public void showBeak() {
			System.out.println("Show the parrot's beak");
		}
	}

	class Penguine extends Bird {
		@Override
		public void showBeak() {
			System.out.println("Show the penguine's beak");
		}

		@Override
		public void fly() {
			throw new RuntimeException("Sorry, penguine's don't fly...")
		}
	}
 
	class Performer {
		public static void showBird(Bird bird) {
			bird.showBeak();
			bird.fly();
		}
	}

	public class Main {
		public static void main(String[] args) {
			Performer performer = new Performer ();

			performer.showBird(new Eagle());

			performer.showBird(new Parrot());

			performer.showBird(new Penguine());
		}
	}


	//The code above violate LSP because in Class Penguine it say that the bird cannot fly but in the Base class it say that a Bird can fly. The derived class did not promise the base that the bird can fly, therefore violating LSP. It made a contract instead of a promise. One of the wrong way to do when fixing is:


	class Performer {
		public static void showBird(Bird bird) { //also violate LSP because now the user of a base class 
			bird.showBeak();                     //need to know if an instance is of a dervived class
			if (!(bird instanceof Penguine))   //violates Open Close Principle
				bird.fly(); 
		}
	}




	We can fix this by refactoring the code


	---JAVA CODE---

	class Bird {
		public void showBeak() {
			System.out.println("Showing beak");
		}
	}

	class FlyingBird extends Bird {
		public void fly() {
			System.out.println("flying...");
		}
	}

	class Eagle extends FlyingBird {
		@Override
		public void showBeak() {
			System.out.println("Show that excellent beak");
		}

		@Override
		public void fly() {
			System.out.println("flying like an eagle");
		}
	}

	class Parrot extends FlyingBird() {
		@Override
		public void showBeak() {
			System.out.println("Show the parrot's beak");
		}
	}

	class Penguine extends Bird {
		@Override
		public void showBeak() {
			System.out.println("Show the penguine's beak");
		}
	}
 
	class Performer {
		public static void showBird(Bird bird) {
			bird.showBeak();
		}

		public void flyBird(FlyingBird bird) {
			bird.fly();
		}
	}

	public class Main {
		public static void main(String[] args) {
			Performer performer = new Performer ();

			Eagle eagle = new Eagle();
			performer.showBird(eagle);
			performer.flyBird(eagle);

			Parrot parrot = new Parrot();
			performer.showBird(parrot);
			performer.flyBird(parrot);

			Penguine penguine = new Penguine();
			performer.showBird(penguine);
			performer.flyBird(penguine); // ERROR!! Not a FlyingBird
		}
	}


2. LSP in Java?

	LSP is being used in Java at least in two places

	Overriding methods cannot throw new unrelated exceptions

	Overriding method's access can't be more restrictive than the overriddent method. For instance, yuo can't override a public method as protected or private in derived class


	---JAVA CODE---

	class Bird {
		public void showBeak() {
			System.out.println("Showing beak");
		}
	}

	class Parrot extends Bird() {
		protected void showBeak() { //VIOLATE LSP. it does not give more but promise less. it have to EXTENDS

		}
	}

	public class Main {
		public static void main(String[] args) {
		}
	}

	//the above code is error, but the error is from the compiler following the LSP. Java help protect LSP to a certain extends. The code below is another example but Java compiler could not detect it


	---JAVA CODE---

	import java.util.Stack;

	public class Main {
		public static void main(String[] args) {
			Stack<Integer> stack = new Stack<Integer>();
			//LIFO

			stack.push(1);
			stack.push(2);
			System.out.println(stack.pop());
			System.out.println(stack.pop());
		}
	}

	//Stack is a derive class from Vector<>, this is a example of poor design and a violation of LSP. Because a Stack cannot be treated as a Vector. It's LIFO, Last in First out. A better design was to use delegation and not inheritance. They should have said a stack contains a vector to hold the data and the push and pop of the stack should have internally used a vector rather than inheriting from a vector. 

	LSP is all about inheritance and substitutability

	Should I inherit from a class? 
		- If you want your instance to reuse a class, then use delegation.
		- If you want your instance to be used as a class, then use inheritance, and ensure that it is really substitutable





									Quiz Part 7

1. Inheritance is not as simple as extending a class, it takes more effort not to violate good design principles.
2. Checked exceptions does not fully ensure that we don't violate LSP when it comes to throwing exceptions.
3. From the pure reuse point of view, delegation may be a better choice than inheritance, if we don't desire substitutability.
4. If you want to reuse a class, then use delegation. If you want an instance to be used in place of another, then use inheritance, but ensure substitutability in that case.
5. Throwing arbitrary exceptions from an overriding method could potentially violate LSP.







									Design Principles: Part 8

1. Nature of Bad Design

	- Rigid - hard to change since changes affect too many parts
	- Fragile - unexpected parts break upon change
	- Immobile - hard to separate from current application for reuse in another

2. DIP - Dependency Inversion Principle

	"High level modules should not depend upon low level modules. Both should depend upon abstractions". Concrete class should not depend on concrete class instead both should depend on interfaces. 

	"Abstractions should not depend up detail. Details should depend upon abstractions"

	---JAVA CODE---

	class TV {
		private int volume;
		public in getVolume() {return volume;}
		public void setVolue(int newVolume) {
			volume = newVolume;
		}
	}

	class Fan {
		private int speed;
		public int getSpeed() {return speed;}

		public void setSpeed(int newSpeed) {
			speed = newSpeed;
		}
	}

	class Remote {
		private TV tv;

		pbulic Remote(TV theTV) {
			tv = theTV;
		}

		public void increase() {
			tv.setVolume(tv.getVolume() + 1);
		}
	}

	public class Main {
		public static void main(String[] args) {
			System.out.println("TV");
			TV tv1 = new TV();

			Remote remote1 = new Remote(tv1);
			System.out.println(tv1.getVolume());

			remote1.increase();
			System.out.println(tv1.getVolume());

			System.out.println("Fan")
			Fan fan1 = new Fan();
			System.out.println(fan1.getSpeed());

			Remote remote2 = new Remote(fan1); //ERROR! this remote expect a TV not a Fan
			remote2.increase();
		}
	}

	//the code above is a concrete class Remote depends on a concrete class TV

	REMOTE---------------->TV

	//to fix this problem we can abstract out the remote, make it an interface and let the concrete class implements from it.





									Quiz Part 8

1. The hiehger level modules should not depend on lower level modules, both should depend on abstractions.
2. A violation of OCP may be fixed by applying DIP.
3. FALSE: A class should never depend on another class, it should only depend on an interface.
4. Blindly applying DIP will result in unnecessary complexity and unnecessarily more code.
5. When extensibiliy is needed, instead of a class depending on another class, it should depend instead on an interface or abstraction.







									Design Principles: Part 9

Continue from the code above


---JAVA CODE---

	interface Appliance {
		int getCurrentValue();
		void setCurrentValue(int value);
	}

	class TV implements Appliance{
		private int volume;
		public in getVolume() {return volume;}
		public void setVolue(int newVolume) {
			volume = newVolume;
		}

		@Override
		public int getCurrentValue() {
			return getVolume();
		}

		@Override
		public void setCurrentValue(int value) {
			setVolume(value);
		}
	}

	class Fan implements Appliance{
		private int speed;
		public int getSpeed() {return speed;}

		public void setSpeed(int newSpeed) {
			speed = newSpeed;
		}

		@Override
		public int getCurrentValue() {
			return getSpeed();
		}

		@Override
		public void setCurrentValue(int value) {
			setSpeed(value);
		}
	}

	class Remote {
		private Appliance appliance;

		pbulic Remote(Appliance anAppliance) {
			appliance = anAppliance;
		}

		public void increase() {
			appliance.setCurrentValue(appliance.getCurrentValue() + 1);
		}
	}

	public class Main {
		public static void main(String[] args) {
			System.out.println("TV");
			TV tv1 = new TV();

			Remote remote1 = new Remote(tv1);
			System.out.println(tv1.getVolume());

			remote1.increase();
			System.out.println(tv1.getVolume());

			System.out.println("Fan")
			Fan fan1 = new Fan();
			System.out.println(fan1.getSpeed());

			Remote remote2 = new Remote(fan1);
			remote2.increase();
		}
	}
			depends         <interface>
	Remote ----------------> Appliance

			<realize>
	TV - - - - - - - - - -> Appliance

			<realize>
	Fan - - - - - - - - - -> Appliance




//alternate design

	---JAVA CODE---

	class TV {
		private int volume;
		public in getVolume() {return volume;}
		public void setVolue(int newVolume) {
			volume = newVolume;
		}

		public Remote getRemote() {
			return new Remote() { //creating anonymouys inner class
				@Override 
				public void increase() {
					volume++;
				}
			}
		}
	}

	class Fan {
		private int speed;
		public int getSpeed() {return speed;}

		public void setSpeed(int newSpeed) {
			speed = newSpeed;
		}

		public Fan getRemote() {
			return new Remote() {
				@Override
				public void increase() {
					speed++;
				}
			}
		}
	}

	interface Remote {
		public void increase();
	}

	public class Main {
		public static void main(String[] args) {
			System.out.println("TV");
			TV tv1 = new TV();

			Remote remote1 = tv1.getRemote();
			System.out.println(tv1.getVolume());

			remote1.increase();
			System.out.println(tv1.getVolume());


			System.out.println("Fan")
			Fan fan1 = new Fan();
			System.out.println(fan1.getSpeed());

			Remote remote2 = fan1.getRemote();
			remote2.increase();
		}
	}


1. Fundamental Principles 

SOLID - SRP
	  - OCP
	  - LSP
	  - Interface Segregation Principle
	  - DIP

DYSOLD - DRY
	   - YAGNI
	   - SRP
	   - OCP
	   - LSP
	   - DIP





									Quiz Part 9

1. The design principles are most useful during tactical design
2. The words that relate to DIP and the solution it offers are extensibility, inheritance and interfaces
3. The O in SOLID principles stands for the acronym OCP
4. DIP is usefull for making the code have loose coupling, extensibile and testable
5. The implementation of iterators in Java and C# rely on inner classes or nested classes







									Design Principles: Part 10

1. Acylic Dependency Principle

	"The dependency structure for released component must be a Directed Acyclic Graph. There can be no cycles"

	If there are cycles, it becomes hard to maintain. Change ripple through. Can't release components in small increments

2. Breaking cyclic dependencies

	1. Move classes
		- keep an eye on cohesion

	2. Introduce a new package/namspace and move a class to the new package
		- new package may be too small and sticking out

	3. Introduce an interface or abstraction
		 - make the offending class implement that interface
		 - move the interface either to the first package or to a new package

	4. Remove the dependency





									Quiz Part 10

1. Dependencies between components should not form cycles
2. Some options to deal with cyclic dependencies is to move classes around, move classes to new packages and introduce an interface
3. The dependency structure for release components must be a directed acyclic graph
4. If there are cycles, then releasing components in small increments becomes hard
5. Inter-package dependencies are more painful than intra-package dependencies







									Design Principles: Part 11

1. Stable Dependecy Principle

	"Dependencies between released components must run in the direction of stability. The dependee must be more stable than the depender". A component can never be more stable than the one it depends upon

	Instability ->  I = Ce / (Ca + Ce) where
	Ca - # of classes outside that depend upon this class
	Ce - # of classes outisde that this class depends upon
	0 <= I <= 1
	0 - ultimately stable; 1 - untilmately unstable

	Components should be arranged such that components with a high I metrics should depend upon component with low I metrics.

2. Stable Abstraction Principle

	"The more stable a component is, the more it must consist of abstract classes. A completely stable category should consist of nothing but abstract classes."

	Implementation of methods change more often than the interface. Interfaces have more intrinsic stability than executable code.

	Abstraction of a component:

		A = (# of interface) / (# of classes + # of interface)
		0 <= A <= 1
		0 - no abstract classes; 1 - all abstract classes





									Quiz Part 11

1. The value of metric I equals 1 means the package is ultimately unstable
2. If an abstraction has no reason to change, we say it is stable, but if it can't change, we say it is rigid
3. If more classes depend on your class than it depending on other classes, then the class will be more rigid
4. The value of A equals 1 means the component is full of interfaces
5. Dependencies running into an interface (instead of a class) result in stability instead of rigidity.







									Design Principles: Part 12

1. Distance from the main sequence

	D = | (A + I - 1) / sqrt(2) |

	0 <= D <= 0.707; Desirable value of D is closed to 0

	normalized form D' = | (A + I - 1) |

	Calculate D value for each component

	Component whose D value is not near Zero can be reexamined and restrctured.





									Quiz Part 12

1. We should keep refactoring even when the D' value reaches zero
2. We can't eliminate change, we can only try to minimize the change and make the system resilient to change
3. For any practical system, we need a balance between stability and flexibility
4. An example of a package with A equals 0 and I equals 0 is Utility library
5. A component is a candidate for refactoring if its D' value is 0.5, 0.75 and 1







									Design Principles: Part 13

1. CurrentExchange example
	
	Design Option 1:
	exchage:
	A = (#I) / (#I + #C) = 0 / 1 = 0
	I = (Fout) / (Fin + Fout) = 1 / 1 = 1
	D' = |A + I - 1| = 0

	service:
	A = 0
	I = 0 / (1 + 0) = 0
	D' = 1

	Overall D' = (0 + 1) / 2 = 0.5


	Design Option 2:
	exchange:
	A = 0
	I = 1

	serivce:
	A = 0.5
	I = 0
	D' = 0.5

	Overall D' = 0.5 / 2 = 0.25


	Design Option 3:
	exchange:
	A = 0.5
	I = 0 / 1 + 0 = 0
	D' = 0.5

	service:
	A = 0
	I = 1 / 1 = 1
	D' = 0

	Overall D' = 0.5 / 2 = 0.25


	Design Option 4:
	exchange:
	A = 0
	I = 1 / 1 = 1
	D' = 0

	service:
	A = 1
	I = 0 / 2 = 0
	D' = 0

	serviceImplementation:
	A = 0
	I = 1 / 1 = 1
	D' = 0

	Overrall D' = 0





									Quiz Part 13

1. In addition to a lowering the D' value, we must be able to argue why a design is better
2. Afferent coupling is fan in
3. We should consider design principles when we decide to redesign.
4. If the value of D' is greater than 0.25, it's most likely an opportunity to redesign.
5. In the final design we used the principle OCP, DIP, Stable abstraction principle and stable dependecy principles