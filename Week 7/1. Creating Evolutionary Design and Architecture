									Creating Evolutionary Design and Architecture: Part 1

1. What's architecture?

	Higher level of design, we're talking about components, components with potentially interfaces. A collection of classes that are cohesive.

	Architecture is a representation, is a rather high level at the system level, how major pieces are communicating between each other and what components responsibilities are and what their interfaces are.

2. Why evolutionary architecture?

	We usually come up with an architecture early in the beginning of the project, this is high risk because the beginning of the project is where we have the least knowledge about the project. As time goes on, the amount of knowledge on the project increases. So...

	It is important to come up with an architecture, however we have to have the courage, we have to have the professional discipline to label that not as an architecture but to label that as an architectural draft.

	There are a couple of things that a good architect should do. The first thing is the architect should not create the architecture but should facilitate the creation of architecture by with the collaboration of the team. Create an architecture that actually evolves and the job of the architect is not to deliver an architecture but to create faciliate the creation of an architectural draft in the beginning

	If we can create an architectural draft in the beginning, then through the sprints or the iterations of the project, we can evolve that architecture. We can then come back and see if the decisions we are making along the way concur with the initial suggestions that we have created in the architectural draft

	SUGGESTION NOT DECISION

	Martin Fowler - "Who Needs an Architect"  - an really good article 

3. The risk of not evolving

	The risk of not evolving the architecture is that the architecture and the design end up being disconnected from the realities of the application, and when the architecture and the design are disconnected from the realities of the application, as the application reality evolves, when we make certain change to the application, it becomes incredibly difficult. The net effect of this is the economic impact. It can also have a market impact

4. The risk of evolving

5. how to deal with that?
	
	- prioritize on value and architectural

6. evolutionary should be a deliberate effect



									Quiz Question: Part 1

1. Evolutionary development should be a deliberate effort.
2. Design should be minimalistic, simple and easier to extend
3. We should develop architectural layers in vertical slices, driven by user stories, by application needs
4. A good architect is a good mentor and involves the team to create the architecture. They are not solely responsible to deliever architecture or make all the architectural decisions.
5. An architecture that does not evolve has the risk of being disconnected from the realities, it could become irrelevant and it could be hard to maintain. It is not stable and desirable.



									Creating Evolutionary Design and Architecture: Part 2

7. Keep it simple

	It takes more effort to create things that are simple. A simple solution is a solution that focuses on the real problem, fails less, keep our focus, it help us to know what we are focusing on and it is easier to maintain, easier to evolve as well. 

8. refactor

9. reversibility

	The ability to back out of a decision that we have made. Reversibility is really important, however, languages decisions are not reversible but that doesn't mean if you're developing in C# you cannot develop componenets in F#. We reverse something by maybe changing the library, maybe there's a better library in the market place and the one we are using is not being maintain by the company, in this case it would be better to reverse out and use a library that best fit for the project. Also since we have automated test, the cost of reversing is lower because we have the quick feedbackloop.

	Don't assume an application is actually reversible, the question is have we really developed it in a way it is reversible. So there's reversibility in concept and reversibility in reality. 

	Don't make everything reversible, ask if something should be reversible or not and if something is useful and important to make reversible, then make sure it's implemented as reversible at the architecture and the design level. Just because something could be reversed doesn't mean we want to make it reversible and just because something is reversible doesn't mean it's been implemeted in a reversible manner as well.

10. last responsible moment

	Postpone decisions can beck says that courage is postponing the decisions of tmr to tmr. 

	One of the most important decision is what to decided and when to decide.



									Quiz Question: Part 2:

1. The ability to back out of a decision, called reversibility, is an important consideration in evolutionary design.
2. In order to be reversible, we should design for it and actively decouple.
3. Combining independent things can make code complex not simple.
4. It's better to move decisions to the last responsible moment because we may know more later than now
5. Not every single decision in software development should be reversible because that's not practical and may be cost prohibitive



									Creating Evolutionary Design and Architecture: Part 3


11. YAGNI

	"You Aren't Gonna Need It (yet)"

	When you are building application try to think of YAGNI. When working through tactical design or even at the architectural level about a messaging component or a tear, ask yourself if you really need this right now, and if not just postpone it. 

	$now 				$later
				>					postpone
			    ==					postpone
			    <					? - what is the probablity of you needing it. If probability is high, go a build it now

	The code that you did not write has the fewst bugs in it, os it's better to really postpone those decisions and avoid writing it and only develop minimum code that actually meets the expectation of the application and delivers value.

12. Tracer bullet

	Experiement and use the feedbackloop to go back and evovle.

13. extensible

	To have good software extensibility, the first place to start looking at is not that technology but the first place to look is how your teams are organized. If the teams are organized across a technology stack, that is a big disadvantage, it increases the cost of development. Some times you do really need these kinds of team but what if you have a cross-functional team where your project has people committed to your project but htey got access to these different layers and somebody could be coordinating through those layers. 

14. what about extensibility?

	One reason extensibility becomes really hard is that we often end up violating the DRY principle "Dont Repeat Yourself". DRY simply say that in your system, you don't want to really have decisions being made at multiple different levels. DRY is not duplication of code, but it's a duplication of effort. 

	If we can minimize the impace of change, it would be a lot better and easier to make the code extensible.

15. triangulate

				3. Base
	1. Class1 				2. Class2

	Take what's common in class1 and class2 and move it up to Base. If you realize that Base is not really needed, you wouldn't create it, if you feel that the base needs only these minimum things then your base is going to be really minimum and the derived classes can do their own stuff. 

	When it comes to building a hierarchy, do not start with the hierarchy but end with the hierarchy. If you start with a hierarchy, you possibly have a monster and complexity. If you end with a hierarchy, that hierarchy is very practical and serves your need.

16. reuse?

	Usable has to be specific

	Re-useable it has to be general

	Successful libraries and frameworks did not come from creating a library framework, they came from application and use and extraction from it.

	Standardization after Innovation is extremely important rather than the other way around. 

	Don't start out to create something reusable, start something that is usable and use it several times and then extract something that's reusable from it.



									Quiz Question: Part 3:

1. YAGNI is an acronym that stands for you're not going to need it
2. Duplication negatively impacts the ability to extend software
3. Start with use in mind, the reuse will automatically fall in place
4. Tracer bullet is a practice that can help us ensure the design we have in mind is practical and relevant
5. Instead of starting with a base class or interface, we should triangulate, that is, refactor that out of the classes



									Creating Evolutionary Design and Architecture: Part 4

17. parsimony

18. minimize libraries and frameworks

19. Postel's law

20. testable

21. Conway's law

22. Integrate early, Integrate often

23. Summary









