									Compose Method Pattern

1. Perils of Long Methods

	Problems with long methods

		- Hard to understand
		- Hard to maintain
		- Hard to reuse
		- Promotes duplication
		- Hard to test
		- Hard to debug
		- Leads to poor cohesion
		- Leads to high coupling

2. How long is long?

	Number of lines is not a good indicator

	A better measure is SLAP - "Single Level of Abstraction Principle"

3. Compose Method Pattern

	A method should be composed of instructions at a single level of abstraction

	Think of a recipe or how you describe activities over a weekend

	//example of failing a SLAP

	int getLiveNeighborCount(boolean[][] landscape, int row, int column) {
		if (row < 0 || row > landscape.length - 1 || column < 0 || column > landscape.length)
			throw new IndexOutOfBoundsException();

		int count = 0;
		for (int i = row - 1; i <= row + 1; i++) {
			for (int j = column - 1; j <= column + 1; j++) {
				if ((i > -1 && j > - 1 && i < landscape.length && j < landscape[0].length && landscape[i][j]))
					count++;
			}
		}

		return landscape[row][column] ? count - 1: count;
	}




	//a better way to write a code

	private void assertBounds(boolean[] landscape, int row, int column) {
		if (row < 0 || row > landscape.length - 1 || column < 0 || column > landscape.length)
			throw new IndexOutOfBoundsException();
	}

	private boolean isThereALiveCellAt(boolean[][] landscape, int row, int column) {
		return (row > -1 && column > - 1 && row < landscape.length && column < landscape[0].length && landscape[row][column])
	}

	int getLiveNeighborCount(boolean[][] landscape, int row, int column) {
		assertBounds(landscape, row, column);

		int count = 0;
		for (int i = row - 1; i <= row + 1; i++) {
			for (int j = column - 1; j <= column + 1; j++) {
				if (isThereALiveCellAt(landscape, i, j)) count++;
			}
		}

		return isThereALiveCellAt(landscape, row, column) ? count - 1 : count;
	}



									Quiz Question
1. Long methods are hard to understand, promote duplicates and hard to reuse
2. To apply the compose method pattern, the extract method refactoring technique is oftern useful
3. Long methods are not suppose to be measure using the number of lines of code
4. The compose method pattern uses the SLAP principle
5. SLAP says method should focus on one level of abstraction